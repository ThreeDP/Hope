dec lst : num -> list num;
--- lst 0 <= [];
--- lst n <= n :: lst(n - 1);

dec lst_base : num # list num -> list num;
--- lst_base (0, l) <= l;
--- lst_base (n, l) <= lst_base(n - 1, n :: l);

dec lst2 : num -> list num;
--- lst2 (n) <= lst_base(n, []);

dec fat : num -> num;
--- fat (0) <= 1;
--- fat (n) <= n * fat(n -1 );

dec som : num -> num;
--- som (0) <= 0;
--- som (n) <= n + soma(n - 1);

dec cabeca : list num -> num;
--- cabeca [] <= error ("Lista vazia!");
--- cabeca ( x :: xs) <= x;

dec elem2 : list num -> num;
--- elem2 [] <= error ("Lista vazia!");
--- elem2 ([x]) <= error ("Poucos elementos!");
--- elem2 (a :: b :: bs) <= b;

dec tamanho : lst num -> num;
--- tamanho [] <= 0;
--- tamanho (x :: xs) <= 1 + tamanho(xs);

dec elempnt : list num -> num;
--- elempnt [] <= error ("Lista vazia!");
--- elempnt ([x]) <= error ("Poucos elementos!");
--- elempnt (x :: xs) <= if tamanho xs = 1
                        then x
                        else elempnt xs;